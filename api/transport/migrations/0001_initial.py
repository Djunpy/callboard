# Generated by Django 4.1.3 on 2022-12-05 03:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('advert', '0001_initial'),
        ('address', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TransportBodyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_type', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Кузов',
                'verbose_name_plural': 'Кузовы',
            },
        ),
        migrations.CreateModel(
            name='TransportBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='transport.transportbrand')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherTransport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.CharField(choices=[('call', 'Позвонить'), ('write', 'Написать'), ('all', 'Любой из указанных')], default='all', max_length=10)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('published', 'Опубликована'), ('draft', 'В черновике'), ('ban', 'В бане')], default='draft', max_length=20)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('color', models.CharField(blank=True, choices=[('white', 'Белый'), ('black', 'Черный'), ('gray', 'Серый'), ('brown', 'Коричневый'), ('red', 'Красный'), ('green', 'Зеленый'), ('blue', 'Синий'), ('pink', 'Розовый'), ('violet', 'Фиолетовый')], max_length=15, null=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='address.address')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_bookmarks', to=settings.AUTH_USER_MODEL)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advert.advertcategory')),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.discount')),
                ('pictures', models.ManyToManyField(to='advert.picture')),
                ('type_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport_type', to='advert.brand')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_adverts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Прочий транспорт',
                'verbose_name_plural': 'Прочий транспорт',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Motorbike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.CharField(choices=[('call', 'Позвонить'), ('write', 'Написать'), ('all', 'Любой из указанных')], default='all', max_length=10)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('published', 'Опубликована'), ('draft', 'В черновике'), ('ban', 'В бане')], default='draft', max_length=20)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('color', models.CharField(blank=True, choices=[('white', 'Белый'), ('black', 'Черный'), ('gray', 'Серый'), ('brown', 'Коричневый'), ('red', 'Красный'), ('green', 'Зеленый'), ('blue', 'Синий'), ('pink', 'Розовый'), ('violet', 'Фиолетовый')], max_length=15, null=True)),
                ('condition', models.CharField(choices=[('b', 'Битый'), ('nb', 'Не битый')], default='nb', max_length=2)),
                ('condition_2', models.CharField(choices=[('n', 'Новый'), ('pr', 'С пробегом')], default='n', max_length=2)),
                ('mileage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Пробег')),
                ('owners', models.SmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('type_engine', models.CharField(blank=True, choices=[('p', 'Бензин'), ('e', 'Электро')], max_length=2, null=True, verbose_name='Тип двигателя')),
                ('fuel_supply', models.CharField(blank=True, choices=[('k', 'Карбюратор'), ('i', 'Инжектор')], max_length=2, null=True, verbose_name='Подача топлива')),
                ('type_of_drive', models.CharField(blank=True, choices=[('c', 'Цепь'), ('r', 'Ремень'), ('k', 'Кордан')], max_length=2, null=True, verbose_name='Тип привода')),
                ('Number_of_cycles', models.SmallIntegerField(help_text='может быть 2 или 4', verbose_name='Число тактов')),
                ('number_of_cylinders', models.SmallIntegerField(help_text='до 1-6', verbose_name='Количество цилиндров')),
                ('type_transmission', models.CharField(blank=True, choices=[('a', 'Автоматическая'), ('m', 'Механическая'), ('v', 'Вариативная'), ('r', 'Роботизированная')], max_length=2, null=True, verbose_name='Коробка передач')),
                ('cylinder_arrangement', models.CharField(blank=True, choices=[('v', 'V-образное'), ('o', 'Оппозитное'), ('r', 'Рядное')], max_length=2, null=True)),
                ('cooling', models.CharField(blank=True, choices=[('v', 'Воздушное'), ('l', 'Жидкосное')], max_length=2, null=True, verbose_name='Охлаждение')),
                ('electric_starter', models.BooleanField(default=False, verbose_name='электростартер')),
                ('abs', models.BooleanField(default=False, verbose_name='Антиблокировочная система')),
                ('tcs', models.BooleanField(default=False, verbose_name='Трэкшн-контроль')),
                ('start_stop_sys', models.BooleanField(default=False, verbose_name='Система старт-стоп')),
                ('windshield', models.BooleanField(default=False, verbose_name='ветровое стекло')),
                ('cofr', models.BooleanField(default=False, verbose_name='Кофр(мотосумка)')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='address.address')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_bookmarks', to=settings.AUTH_USER_MODEL)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advert.advertcategory')),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.discount')),
                ('pictures', models.ManyToManyField(to='advert.picture')),
                ('type_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport_type', to='advert.brand')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_adverts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Мотоцикл',
                'verbose_name_plural': 'Мотоцыклы',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.CharField(choices=[('call', 'Позвонить'), ('write', 'Написать'), ('all', 'Любой из указанных')], default='all', max_length=10)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('published', 'Опубликована'), ('draft', 'В черновике'), ('ban', 'В бане')], default='draft', max_length=20)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('color', models.CharField(blank=True, choices=[('white', 'Белый'), ('black', 'Черный'), ('gray', 'Серый'), ('brown', 'Коричневый'), ('red', 'Красный'), ('green', 'Зеленый'), ('blue', 'Синий'), ('pink', 'Розовый'), ('violet', 'Фиолетовый')], max_length=15, null=True)),
                ('condition', models.CharField(choices=[('b', 'Битый'), ('nb', 'Не битый')], default='nb', max_length=2)),
                ('condition_2', models.CharField(choices=[('n', 'Новый'), ('pr', 'С пробегом')], default='n', max_length=2)),
                ('mileage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Пробег')),
                ('owners', models.SmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('cd_dvd', models.BooleanField(default=False, verbose_name='CD/DVD')),
                ('mp3', models.BooleanField(default=False, verbose_name='MP3')),
                ('radio', models.BooleanField(default=False, verbose_name='Радио')),
                ('video', models.BooleanField(default=False, verbose_name='Видео')),
                ('usb', models.BooleanField(default=False)),
                ('aux', models.BooleanField(default=False)),
                ('bluetooth', models.BooleanField(default=False)),
                ('gps', models.BooleanField(default=False, verbose_name='GPS-Навигация')),
                ('automatic_valet', models.BooleanField(default=False, verbose_name='Автоматический парковщик')),
                ('rain_sensor', models.BooleanField(default=False, verbose_name='Датчик дождя')),
                ('light_sensor', models.BooleanField(default=False, verbose_name='Датчик света')),
                ('front_parking_sensors', models.BooleanField(default=False, verbose_name='Парктроник передний')),
                ('rear_parking_sensors', models.BooleanField(default=False, verbose_name='Парктроник задний')),
                ('blind_spot_monitor', models.BooleanField(default=False, verbose_name='Система контроля слепых зон')),
                ('rear_view_camera', models.BooleanField(default=False, verbose_name='Камера заднего вида')),
                ('cruise_control', models.BooleanField(default=False, verbose_name='Круиз контроль')),
                ('on_board_computer', models.BooleanField(default=False, verbose_name='Бортовый компьютер ')),
                ('signaling', models.BooleanField(default=False, verbose_name='Сигнализация')),
                ('central_locking', models.BooleanField(default=False, verbose_name='Центральный замок')),
                ('satellite', models.BooleanField(default=False, verbose_name='Спутник')),
                ('immobilizer', models.BooleanField(default=False, verbose_name='Иммобилайзер')),
                ('frontal', models.BooleanField(default=False, verbose_name='Фронтальные')),
                ('knees', models.BooleanField(default=False, verbose_name='Колленые ')),
                ('curtains', models.BooleanField(default=False, verbose_name='Шторки')),
                ('side_front', models.BooleanField(default=False, verbose_name='Боковые передние ')),
                ('side_rear', models.BooleanField(default=False, verbose_name='Боковые задние ')),
                ('anti_lock_brakes', models.BooleanField(default=False, verbose_name='Антиблокировка тормозов')),
                ('anti_slip', models.BooleanField(default=False, verbose_name='Антиблокировка')),
                ('exchange_rate_stability', models.BooleanField(default=False, verbose_name='Курсовая устойчивость')),
                ('decay_of_braking_forces', models.BooleanField(default=False, verbose_name='Распад тормозных усилий')),
                ('emergency_braking', models.BooleanField(default=False, verbose_name='Экстренное  торможение ')),
                ('differential_block', models.BooleanField(default=False, verbose_name='Блок дифференциала')),
                ('pedestrian_detection', models.BooleanField(default=False, verbose_name='Обнаружение пешеходов')),
                ('steering_columns', models.BooleanField(default=False, verbose_name='Рулевые колонки')),
                ('mirror', models.BooleanField(default=False, verbose_name='Зеркал')),
                ('steering_column', models.BooleanField(default=False, verbose_name='Рулевой колонки')),
                ('folding_mirrors', models.BooleanField(default=False, verbose_name='Складывание зеркал')),
                ('salom', models.CharField(blank=True, choices=[('leather', 'Кожа'), ('textile', 'Ткань'), ('velours', 'Велюр'), ('combined', 'Комбинированный')], max_length=20, null=True)),
                ('power_steering', models.CharField(blank=True, choices=[('hydrlic', 'Гидравлический'), ('electric', 'Электрический'), ('eltro-hyrlic', 'Электрогидравлический')], max_length=20, null=True, verbose_name='Усилитель руля')),
                ('climat_control', models.CharField(blank=True, choices=[('aircontr', 'Кондиционер'), ('climcondis', 'Климат-контроль одноразовый'), ('climconreus', 'Климат-контроль одноразовый')], max_length=15, null=True, verbose_name='Управление климатом')),
                ('steering_wheel_control', models.BooleanField(default=True, verbose_name='Управление на руле')),
                ('athermal_glazing', models.BooleanField(blank=True, null=True, verbose_name='Атермальный остекление')),
                ('power_windows', models.CharField(blank=True, choices=[('fronly', 'Только передняя'), ('froandrear', 'Переднее и задние')], max_length=20, null=True, verbose_name='Электростеклоподъемники')),
                ('type_engine', models.CharField(choices=[('p', 'Бензин'), ('g', 'Газ'), ('d', 'Дизель'), ('gb', 'гибридные'), ('e', 'Электро')], default='p', max_length=2, verbose_name='Тип двигателя')),
                ('engine_volume', models.FloatField(blank=True, max_length=10, null=True, verbose_name='Обьем двигателя')),
                ('power', models.SmallIntegerField(blank=True, null=True, verbose_name='Мощность, л.с.')),
                ('type_transmission', models.CharField(choices=[('a', 'Автоматическая'), ('m', 'Механическая'), ('v', 'Вариативная'), ('r', 'Роботизированная')], max_length=2, verbose_name='Коробка передач')),
                ('drive_unit', models.CharField(blank=True, choices=[('front', 'Передний'), ('real', 'Задний'), ('full', 'Полный'), ('hybrid', 'Гибридный')], max_length=10, null=True, verbose_name='Привод')),
                ('fuel_consumption_mixed', models.IntegerField(blank=True, null=True, verbose_name='Расход топлива смешанный')),
                ('acceleration_to', models.IntegerField(blank=True, null=True, verbose_name='Разгон до 100 км/ч')),
                ('audio_system', models.CharField(choices=[('1', '2 Колонки'), ('2', '4 Колонки'), ('3', '6 Колонки'), ('1', '+8 Колонки')], default='1', max_length=2, verbose_name='Аудиосистема')),
                ('subwoofer', models.BooleanField(blank=True, default=False, null=True, verbose_name='Сабвуфер')),
                ('headlights', models.CharField(choices=[('halogen', 'Галогенные'), ('xenon', 'Ксеноновые '), ('led', 'Светодиодные')], default='halogen', max_length=15, verbose_name='Фары')),
                ('fog', models.BooleanField(default=False, verbose_name='Противотуманные ')),
                ('headlight_washers', models.BooleanField(default=False, verbose_name='Омыватели фар')),
                ('adaptive_lighting', models.BooleanField(default=False, verbose_name='Адаптивное освещение')),
                ('tires_and_wheels', models.IntegerField(blank=True, null=True, verbose_name='Шины и диски')),
                ('winter_tires', models.BooleanField(default=False, verbose_name='Зимние шины в комплекте')),
                ('front_seats', models.BooleanField(default=False, verbose_name='Передние сиденья')),
                ('rear_seats', models.BooleanField(default=False, verbose_name='Заднее сиденье')),
                ('mirrors', models.BooleanField(default=False, verbose_name='Зеркал')),
                ('rear_glass', models.BooleanField(default=False, verbose_name='Заднего стекла')),
                ('rudder', models.BooleanField(default=False, verbose_name='Руля')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='address.address')),
                ('body_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='transport.transportbodytype', verbose_name='Тип кузова')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_bookmarks', to=settings.AUTH_USER_MODEL)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advert.advertcategory')),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.discount')),
                ('pictures', models.ManyToManyField(to='advert.picture')),
                ('type_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport_type', to='advert.brand')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_adverts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Легковой автомобиль',
                'verbose_name_plural': 'Легковые автомобили',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Bus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.CharField(choices=[('call', 'Позвонить'), ('write', 'Написать'), ('all', 'Любой из указанных')], default='all', max_length=10)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('published', 'Опубликована'), ('draft', 'В черновике'), ('ban', 'В бане')], default='draft', max_length=20)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('color', models.CharField(blank=True, choices=[('white', 'Белый'), ('black', 'Черный'), ('gray', 'Серый'), ('brown', 'Коричневый'), ('red', 'Красный'), ('green', 'Зеленый'), ('blue', 'Синий'), ('pink', 'Розовый'), ('violet', 'Фиолетовый')], max_length=15, null=True)),
                ('condition', models.CharField(choices=[('b', 'Битый'), ('nb', 'Не битый')], default='nb', max_length=2)),
                ('condition_2', models.CharField(choices=[('n', 'Новый'), ('pr', 'С пробегом')], default='n', max_length=2)),
                ('mileage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Пробег')),
                ('owners', models.SmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='address.address')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_bookmarks', to=settings.AUTH_USER_MODEL)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advert.advertcategory')),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport', to='advert.discount')),
                ('pictures', models.ManyToManyField(to='advert.picture')),
                ('type_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_transport_type', to='advert.brand')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_adverts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Автобус',
                'verbose_name_plural': 'Автобусы',
                'abstract': False,
            },
        ),
    ]
